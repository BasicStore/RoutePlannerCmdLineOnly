#   Licensed to the Apache Software Foundation (ASF) under one or more
#   contributor license agreements.  See the NOTICE file distributed with
#   this work for additional information regarding copyright ownership.
#   The ASF licenses this file to You under the Apache License, Version 2.0
#   (the "License"); you may not use this file except in compliance with
#   the License.  You may obtain a copy of the License at
#
#       http://www.apache.org/licenses/LICENSE-2.0
#
#   Unless required by applicable law or agreed to in writing, software
#   distributed under the License is distributed on an "AS IS" BASIS,
#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#   See the License for the specific language governing permissions and
#   limitations under the License.

# -- standard errors --
errors.header=<UL>
errors.prefix=<LI>
errors.suffix=</LI>
errors.footer=</UL>
# -- validator --
errors.invalid={0} is invalid.
errors.maxlength={0} can not be greater than {1} characters.
errors.minlength={0} can not be less than {1} characters.
errors.range={0} is not in the range {1} through {2}.
errors.required={0} is required.
errors.byte={0} must be an byte.
errors.date={0} is not a date.
errors.double={0} must be an double.
errors.float={0} must be an float.
errors.integer={0} must be an integer.
errors.long={0} must be an long.
errors.short={0} must be an short.
errors.creditcard={0} is not a valid credit card number.
errors.email={0} is an invalid e-mail address.
# -- other --
errors.cancel=Operation cancelled.
errors.detail={0}
errors.general=The process did not complete. Details should follow.
errors.token=Request could not be completed. Operation is not in sequence.


# -- welcome --
welcome.title=Struts Blank Application
welcome.heading=Welcome!
welcome.message=To get started on your own application, copy the struts-blank.war to a new WAR file using the name for your application. Place it in your container's "webapp" folder (or equivalent), and let your container auto-deploy the application. Edit the skeleton configuration files as needed, restart your container, and you are on your way! (You can find the MessageResources.properties file with this message in the /WEB-INF/src folder.)


# -- Global Paths
global.this_prop_file=\\WEB-INF\\classes\\java\\MessageResources.properties 
global.input_file=\\WEB-INF\\lib\\LondonTube.xml


# APP Root Extension - most cases
global.app_root_extension=\\webapps\\RoutePlannerMVC_phase3_struts\\


# APP Root Extension - Used on dodgy laptop instance 
#global.app_root_extension=\\..\\..\\..\\..\\..\\Program Files\\apache-tomcat-6.0.18\\webapps\\RoutePlannerMVC_phase3_struts


# -- Log File Properties
log_properties.rel_path=\\logs\\rp3log.properties




# Database params
#db.dbms=FDM_ORACLE
#db.host=oracle.fdmgroup.com
#db.port=1521
#db.name=campus
#db.driver_type=jdbc:oracle:thin:
#db.username=paulbickell
#db.pass=AaZsaqw45
db.dbms=BICKY_MYSQL
db.host=localhost
db.port=3306
db.name=campus
db.driver_type=jdbc:mysql:
db.username=root
db.pass=kiwi17


# Change Pass Refresh Period
pass_screen.refresh_period_days=10




# -- Other Global Buttons
global.purchase=Purchase History
global.admin=Admin Corner
global.logout=Log Out
global.basket=View Basket
global.purchase_ticket=Proceed to Checkout
global.date_label=date
global.month_label=month
global.year_label=year





# -- Welcome Page Struts Params --
login.title=Welcome to your trusty Route Planner!
login.instruction=Please sign in with your secret username and pass:
login.small_print=Not used Route Planner before?<br>To use this site as a guest, please email support: &nbsp;&nbsp;&nbsp; paul.bickell@fdmgroup.com
login.userLabel=Username
login.passLabel=Password
login.entry=ENTER




# -- Minor Error Page
minor_error.logout=Log Out
minor_error.query=Resume Activities 




# -- Query Page Struts Params --
query_page.startLabel=Start
query_page.destLabel=Destination
query_page.logout=Log Out
query_page.admin=Admin Corner
query_page.join=Become Member
query_page.basket=View Basket
query_page.query=Find Route
query_page.purchase=Purchase History
#query_page_error.destination=An error has been caught courtesy of standard validation techniques
#query_page_error.start=Quick, call the fire brigade!!!
test.error=Error added from action. Ty Vole!


# -- Change Pass Page
changepass.oldUserLabel=User Name
changepass.oldPassLabel=Old Password
changepass.newPassLabel=Enter New Password
changepass.retypeNewPassLabel=Retype New Password
changepass.exit=Log Out
changepass.change=Change Pass
changepass.do_not_change=Do Not Change Pass


# -- Change Pass Confirmation Page
change_pass_conf.ok=OK
change_pass_conf.title=Password Change Confirmation


# -- Output Page
output.journeyDetailsLabel=Your journey details are as indicated below:
output.logout=Log Out
output.purchase_history=Purchase History
output.new_route=Find New Route
output.admin=Admin Corner
output.add_to_basket=Add to Basket
output.purchase_ticket=Proceed to Checkout
output.more_details_message=Please provide further travel details before proceeding:
output.invalid_pas_type_label=Invalid passenger type, please select one of the following passenger types instead:
output.number_tickets_label=Number of Tickets:
output.travel_date_label=Travel Date:
output.pas_type_label=Passenger Type:
images_path.output_background=\\images\\linux_london_underground.jpg




# -- Basket Page
basket.logout=Log Out
basket.admin=Admin Corner
basket.purchase_history=Purchase History
basket.new_route=Find New Route
basket.purchase_ticket=Purchase Selected
basket.remove_selected=Remove Selected
basket.remove_all=Remove All


# -- Admin Corner Struts Params --
admin_corner.title=Administrator Menu
admin_corner.instruction=Please select the type of service you wish to configure:
admin_corner.user_admin_label=User Admin
admin_corner.ticket_admin_label=Ticket Admin
admin_corner.logout=Log Out
admin_corner.query=Find Route
admin_corner.config=Configure



# -- Admin Users Struts Params
admin_users.title=User Administrator
admin_users.instruction=Search for an existing user or click 'Setup New User' for creating a new account
admin_users.addRolesInstruction=Specify the roles first and then add username and pass:
admin_users.usernameLabel=Username
admin_users.activePassLabel=Active Pass
admin_users.newPassLabel=New Pass
admin_users.activeRolesLabel=Active Roles
admin_users.inactiveRolesLabel=Inactive Roles
admin_users.selectUserLabel=Select User
admin_users.searchExistingUserButton=Search Existing User
admin_users.searchButton=Search Users
admin_users.setupNewUserButton=Setup New User
admin_users.selectUserButton=Select User
admin_users.modifyPassButton=Modify Password
admin_users.resetButton=Reset
admin_users.adminButton=Admin Corner
admin_users.logoutButton=Log Out
admin_users.removeButton=Remove User
admin_users.addUserButton=Add User
admin_users.withdrawRole=Withdraw Role
admin_users.addRole=Add Role
admin_users.roleHelpButton=?






# -- Admin Tickets Struts Params --
admin_tickets.title=Tickets Administor
admin_tickets.note1=Note 1: Only one form of a ticket may be added at once. For example, a ticket called "Weekend Return"<br> with a start date of 01/01/2009, must be added multiple times to reflect the different prices<br> for the passenger type specified.
admin_tickets.note2=Note 2: Admin does not have the right to delete or significantly alter the tickets created.
admin_tickets.search_instruction=Begins with / (leave blank to search for all)
admin_tickets.select_ticket_label=Select Specific Ticket
admin_tickets.ticket_name_label=Ticket Name
admin_tickets.2_zones_label=Ticket Price (2 zones):
admin_tickets.4_zones_label=Ticket Price (4 zones): 
admin_tickets.6_zones_label=Ticket Price (6 zones):
admin_tickets.valid_from_label=Ticket Valid From:
admin_tickets.valid_until_label=Ticket Valid Until:  
admin_tickets.notes_label=Notes
admin_tickets.pas_type_label=Passenger Type
admin_tickets.search_button=Search
admin_tickets.search_existing_ticket_button=Search Existing Ticket
admin_tickets.setup_new_ticket_button=Setup New Ticket
admin_tickets.select_button=Select Ticket
admin_tickets.admin_corner_button=Admin Corner
admin_tickets.logout_button=Log Out
admin_tickets.modify_notes_button=Modify Notes
admin_tickets.add_new_button=Add New Ticket
admin_tickets.show_pas_types=Show Passenger Types
admin_tickets.configure=Configure
admin_tickets.new_ticket_name=New Ticket Name
admin_tickets.existing_ticket_name=Existing Ticket Name





# -- Purchase History Params
purchase_history.ph_filter=Purchase History Filter
purchase_history.logout=Log Out
purchase_history.query=Find New Route
purchase_history.admin=Admin Corner
purchase_history.basket=Basket Contents
purchase_history.last_week_option=last week
purchase_history.last_month_option=last month
purchase_history.last_year_option=last year
purchase_history.last_day_option=last day



# -- Checkout Params
checkout.logout_button=Log Out
checkout.view_order_button=View Order
checkout.select_card_button=Select
checkout.remove_card_button=Remove
checkout.cancel_button=Cancel
checkout.purchase_selected_card_button=Purchase with this Card
checkout.purchase_button=Purchase
checkout.main_instruction=Enter payment details below:
checkout.new_card_instruction=If not listed above, please add your card details below:
checkout.name_label=Name on Card
checkout.card_type_label=Card Type
checkout.card_number_label=Card Number
checkout.security_code_label=Security Code
checkout.valid_from_label=Valid From:
checkout.expiry_date_label=Expiry Date:
checkout.date=date
checkout.month=month
checkout.year=year
checkout.mastercard=Mastercard
checkout.visa=Visa
checkout.american_express=American Express


# -- Sale Confirmation Params
sale_conf.logout=Log Out
sale_conf.query=Find New Route
sale_conf.notification_message=Sale Confirmation 


# -- Registration Params
register.page_title=Membership Request Form
register.instruction=Please fill in as much private information about yourself as possible so we can store it in our database and sell it on to third parties in the future, without your consent.
register.back_button=Back
register.register_button=Register
register.title_label=Title
register.region_label=Region or State
register.city_label=City
register.country_label=Country
register.firstname_label=Firstname
register.initials_label=Initials
register.lastname_label=Lastname
register.email_label=Email
register.confirm_email_label=Confirm Email
register.address1_label=Address (Line 1)
register.address2_label=Address (Line 2)
register.address3_label=Address (Line 3)
register.tel_mobile_label=Tel(mobile)
register.tel_home_label=Tel(home)
register.tel_office_label=Tel(office)



# -- Registration Confirmation Params
registration_conf.ok_button=OK
registration_conf.welcome_message=Your registration has been confirmed. You are now a member.
registration_conf.title=Registration Confirmed



# -- Database SQL Statements --> CredentialsAccess
dbca.user_exists=select user_name, user_pass from users
dbca.are_creds_established=select first_entry_date, staff_reset_pass from users where user_name = ? and user_pass = ?
dbca.update_roles=update user_roles set user_name = ? where user_name = ?
dbca.update_credentials=update users set user_pass = ? where user_name = ? and user_pass = ?
dbca.get_max=select max(user_id) from users
dbca.add_user_roles=insert into user_roles values(?,?,?)
dbca.add_user=insert into users values(?,?,?,?,?,?)
dbca.update_user=update users set person_id = ? where user_id = ?
dbca.add_user_null_person=insert into users values(?,?,?,?,?,null)
dbca.staff_reset_pass=update users set staff_reset_pass = ? where user_name = ?
dbca.search_user=select user_name from users where user_name like '?%'
dbca.remove_roles=delete from user_roles where user_name = ?
dbca.remove_user=delete from users where user_name = ?
dbca.update_user_pass=update users set user_pass = ? , staff_reset_pass = ? where user_name = ?
dbca.member_upgrade=insert into user_roles values(?,?,'MEMBER')
dbca.get_user_roles=select role_name from user_roles where user_name = ?
dbca.get_user=select user_id,user_name,user_pass,first_entry_date,staff_reset_pass,person_id from users where user_name = ?
dbca.get_user_by_id=select user_id,user_name,user_pass,first_entry_date,staff_reset_pass,person_id from users where user_id = ?
dbca.get_user_check_pass=select user_id,user_name,user_pass,first_entry_date,staff_reset_pass,person_id from users where user_name = ? and user_pass = ?
dbca.get_username_list=select user_name from users
dbca.get_distinct_role_list=select distinct role_name from user_roles
dbca.get_user_list=select user_id,user_name,user_pass,first_entry_date,staff_reset_pass,person_id from users
dbca.add_role=insert into user_roles values(?,?,?)
dbca.remove_role=delete from user_roles where user_name = ? and role_name = ?
	


# -- Database SQL Statements --> BasketAccess
dbba.max_basket=select max(basket_id) from basket_contents
dbba.insert_basic_basket=insert into basket_contents values(?,?,?,?,?,?,?,?,?,?,null,null,null,null,null,null,null,'Y')
dbba.remove_basket=delete from basket_contents where basket_id = ?
dbba.remove_all_baskets=delete from basket_contents where user_id = ? and transaction_date is null
dbba.get_unpurchased_baskets=select basket_id, user_id, ticket_id, number_tickets,passenger_type_code, date_of_travel, number_zones, the_start,destination,total_payment from basket_contents where user_id = ? and transaction_date is null 
dbba.get_purchased_baskets=select basket_id, user_id, ticket_id, number_tickets,passenger_type_code, date_of_travel, number_zones, the_start,destination, total_payment, transaction_date, card_number,name_on_card, sec_code, card_type, expiry_date, valid_from,activated from basket_contents where user_id = ? and transaction_date is not null
dbba.update_basket_part1=update basket_contents set transaction_date = 
dbba.update_basket_part2=,card_number = ?, name_on_card = ?, sec_code = ?,card_type = ?, expiry_date = ?, valid_from = ? ,activated = 'Y' where basket_id = ?
dbba.deactivate_payment_method=update basket_contents set activated = 'N' where card_number = ? and name_on_card = ? and sec_code = ?
dbba.get_payment_list=select distinct card_number, name_on_card, sec_code,card_type, expiry_date, valid_from from basket_contents where transaction_date is not null and user_id = ? and activated = 'Y' 
dbba.purchased_basket_filter_list=select basket_id, user_id, ticket_id, number_tickets,passenger_type_code, date_of_travel, number_zones, the_start,destination, total_payment, transaction_date, card_number, name_on_card, sec_code, card_type, expiry_date, valid_from,activated from basket_contents where user_id = ? and transaction_date is not null  

 
# -- Database SQL Statements --> PassengerTypeAccess
dbpta.add_passenger_type=insert into passenger_types values(?,?)
dbpta.get_passenger_type=select code from passenger_types where pas_type = ?
dbpta.get_pt_from_code=select pas_type from passenger_types where code = ?
dbpta.get_passenger_type_list=select pas_type,code from passenger_types
dbpta.get_pt_names_list=select distinct pas_type from passenger_types


# -- Database SQL Statements --> PersonAccess
dbpa.register_payment_details=insert into payment_methods values(?,?,?,?,?,?,null,?)
dbpa.payinfo_exists=select count(card_number) from payment_methods where name_on_card = ? and card_number = ?
dbpa.payinfo_exists_by_details=select count(card_number) from payment_methods where name_on_card = ? and card_number = ?
dbpa.update_payment_details=update payment_methods set card_type = ?, card_number = ?, security_code = ?, expiry_date = ?, valid_from = ?, purchase_id = ?,name_on_card = ? where person_id = ? 
dbpa.get_payment_details=select card_type, card_number, security_code, expiry_date, valid_from, purchase_id, name_on_card from payment_methods where person_id = ? 
dbpa.get_max_person_id=select max(person_id) from all_registered
dbpa.register_person=insert into all_registered values(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)	
dbpa.get_contact_details=select title, firstname, initials, lastname, address_line_1, address_line_2, address_line_3, city, region_or_state, country, email, mobile_tel, home_tel, office_tel from all_registered where person_id = ? 
dbpa.update_contact_details=update all_registered set title = ?, finrstname = ?, initials = ?,lastname = ?,address_line_1 = ?,address_line_2 = ?,address_line_3 = ?,city = ?,region_or_state = ?,country = ?,email = ?,mobile_tel = ?,home_tel = ?,office_tel = ? where person_id = ?



# -- Database SQL Statements --> ZoneStageAccess
dbzs.get_zones=select zone from zone_stage where station_name = ?



# -- Database SQL Statements --> PurchaseAccess
dbpsa.get_max_purchase_id=select max(purchase_id) from purchases
dbpsa.add_purchase=insert into purchases values(?,?,?,?)
dbpsa.get_purchase=select purchase_id, transaction_date, total_payment, user_id from purchases where purchase_id = ? 
    


# -- Database SQL Statements --> TicketAccess
dbta.get_distinct_ticket_name_list=select distinct ticket_name from tickets
dbta.get_max_ticket_id=select max(ticket_id) from tickets
dbta.does_ticket_exist=select ticket_name from tickets where ticket_name = ? and passenger_code = ?
dbta.add_ticket=insert into tickets values(?,?,?,?,?,?,?,?,?)
dbta.update_ticket=update tickets set notes = ? where ticket_name = ? and passenger_code = ?
dbta.update_ticket_notes=update tickets set notes = ? where ticket_id = ?
dbta.get_ticket=select ticket_id, ticket_name,notes,cost_2_zones, cost_4_zones, cost_6_zones, passenger_code, valid_from, valid_to from tickets where ticket_name = ? and passenger_code = ?
dbta.get_ticket_by_id=select ticket_id, ticket_name,notes,cost_2_zones, cost_4_zones, cost_6_zones, passenger_code, valid_from, valid_to from tickets where ticket_id = ?
dbta.get_ticket_passenger_types=select distinct passenger_code from tickets where ticket_name = ?
dbta.get_all_tickets=select ticket_id, ticket_name,notes, cost_2_zones, cost_4_zones, cost_6_zones, passenger_code, valid_from,valid_to from tickets
dbta.get_ticket_pt_names_list=select passenger_code from tickets where ticket_name = ?                         
			 

                                                   






